"use strict";
// Переменные — это хранилище информации
// Let (коробочка) number(имя) =(присваивание) 5;
// Или
// const (коробочка) leftBorderWidth(имя) =(присваивание) 1;

// способы задания переменных –
// let- изменяема
// const – не изменяемая
// var – не применять!


// Директива 
// “use strict”;
// Мы говорим скрипту- мы  работаем в современном режиме( НЕ ПОЗВОЛЯЕТ РАБОТАТЬ БЕЗ ПЕРЕМЕННЫХ) 
// !НУЖНО ВСЕГДА ПРОПИСЫВАТЬ В НАЧАЛЕ СКРИПТА!


// ЧТО МОЖНО ПОМЕЩАТЬ В ПЕРЕМЕННЫЕ
// 8 ТИПОВ ДАННЫХ
// ПРОСТЫЕ ТИПЫ:
// -ЧИСЛА 1 ,2, 3
// -СТРОКИ ‘NAME’
// -ЛОГИЧЕСКИЕ (BOOLEAN)
// true 
// false

// null –когда чего-то нет
// undefined – нет значение
// Symbol – на практике почти не используется
// BigInt – очень большие числа больше чем 2 в 53 степени



// Объекты:
// Специальные:
// -Массивы[] - это хранение данных по порядку
// -Функции Function
// -Объект Дата
// -Регулярные выражения 
// -Ошибки


// let number = 4.6;

// console.log(-4/0);
// console.log('string' * 9);

// const persone = 'Alex';

// const bool = true;

// // console.log(something);

// let und;
// console.log(und);

// const obj = {
//     name: "John",
//     age: 25,
//     isMarried: false
// };

// console.log(obj.name);
// // console.log(obj['name']);


// let arr =['plum.png', 'orange.jpg', 6, 'apple.bmp', {}, []];
// console.log(arr[1]);

// const result = confirm("Are you here?");
// console.log(result);

// const answer = prompt("Вам есть 18?", "");
// // console.log(typeof(answer)); мы всегда получаем строчное значение 
// от пользователя, но мы можем поставить "+" перед Promt или другом названии то получим "number"

// const answer = +prompt("Вам есть 18?", "");
// console.log(typeof(answer + 5)); здесь получим математическое сложение 

// const answers = []; /* - используем массивы */

// // answers[0] = prompt('как ваше имя?', "");
// // answers[1] = prompt('как ваше фамилия?', "");
// // answers[2] = prompt('возраст?', "");

// // -одна из первых команд которая появилась в js для вывода информации 
// // от пользователя в реальных проектаъ не используют(document)
// console.log(typeof(answers));

// -confirm,prompt,alert - работают только ввнутри браузера




/* ИНТЕРПОЛЯЦИЯ */
// const category = "toys";

// // console.log("https://someurl.com/" + category); старый прием до применения интерполяции 

// console.log(`https://someurl.com/${category}`); /* ``- бэктики используются для интерполяции */

// const user = "MAX";

// alert(`Привет, ${user}`);






/*    // ОПЕРАТОРЫ JS */
// + конкотинация
// console.log('arr' + ' - object');
// console.log( 4 + '5');


// /* ИНКРЕМЕНТ И ДЕКРЕМЕНТ */
// существуют для укорочения кода и соответственно уменьшают или увеличивают значение на 1
let incr = 10,
    decr = 10;

// incr++; /* оператор инкремента, то есть увеличение на 1 ЭТО ПОСТФИКСНАЯ */ 
// /* так же можно написать ++incr; ЭТО ПРЕФИКСНАЯ */
// decr--; /* оператор дикремента , то есть уменьшение на 1 ЭТО ПОСТФИКСНАЯ */ 
// /* так же можно написать --decr; ЭТО ПРЕФИКСНАЯ */

// console.log(incr); /* 11 */
// console.log(decr); /* 9 */

// console.log(incr++); /* ПОСТФИКСНАЯ форма возвращает старое значение и ответ 
// такой же какой мы задали переменной "10"  */ 
// console.log(decr--); /* ПОСТФИКСНАЯ форма возвращает старое значение и ответ 
// такой же какой мы задали переменной "10"  */

// console.log(++incr); /* ПРЕФИКСНАЯ форма работает с прибавлением 1 и результат "11" */
// console.log(--decr); /* ПРЕФИКСНАЯ форма работает с вычитанием 1 и результат "9" */


// console.log(5%2); /* % применяется для получения остатка ,то есть при делении данных чисел остаток будет "1" */

/* "=" - знак присваивания

"==" - знак сравнения */
// console.log(2*4 == 8); - true , console.log(2*4 == "8"); - true

// "===" - строгое сравнение при его использовании будет работать только сравнения одинаковых по типу данных
// console.log(2*4 === "8"); - false, console.log(2*4 === 8); - true


// && - оператор "и" работает только тогда, когда у нас 2 или больше подопытных являются true
// || - оператор "или"" работает только когда один из них true

// const isChecked = true,
//         isClose = true; 

// console.log(isChecked && isClose); - true


// const isChecked = true,
//         isClose = false;

// console.log(isChecked || isClose); -true


// "!" - оператор отрицания применяется перед именем чтобы придать обратное значение пример:

// const isChecked = false,
//         isClose = false;

// console.log(isChecked || isClose); -false но если мы поставим "!" то,

// const isChecked = false,
//         isClose = false;

// console.log(isChecked || !isClose); -true


/* ПОРЯДОК ВЫПОЛНЕНИЯ ЭТИХ ОПЕРАТОРОВ */ /* ТАБЛИЦА В ИНТЕРНЕТЕ */

// console.log(2 + 2 * 2 != "6"); - false
// console.log(2 + 2 * 2 !== "6"); - true



/* Как работать с GitHub с разных
компьютеров, gitignore и Git Kraken */
